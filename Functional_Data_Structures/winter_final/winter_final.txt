Zack Raver
ravzac14
3/12/15

PLD (Functional Data Structures) Final for Winter 15


=================================Dequeques============================================

1) Representation for the dequeque?

It's represented as 4 lists (L R L' R') where L' and R' are the pre-evaluated tails of L and R respectively.


2) insertL 1, insertL 2, insertL 3, insertR 4, insertR 5, removeL, removeR??

insertL 1 (Quad [] [] [] []) = makedq ([1] [] [] [])
                             = Quad [1] [] [] []

insertL 2 (Quad [1] [] [] []) = makedq ([2,1] [] [] [])
                              = Quad [2,1] [] [] []
                              
insertL 3 (Quad [2,1] [] [] []) = makedq ([3,2,1] [] [] [])
                                = Quad (take 1 [3,2,1]) (rot1 (1,[3,2,1], [])) (take 1 [3,2,1]) (rot1 (1,[3,2,1],[]))
                                = Quad [3] (rot2 ([3,2,1],[],[])) [2] (rot2 ([3,2,1],[],[]))
                                = Quad [3] [1,2] [3] [1,2]

insertR 4 (Quad [3] [1,2] [3] [1,2]) = makedq ([3] [4,1,2] [] [2])
                                     = Quad [3] [4,1,2] [] [2]

insertR 5 (Quad [3] [4,1,2] [] [2] ) = makedq ([3] [5,4,1,2] [] [])
                                     = Quad (rot1 (2,[3],[5,4,1,2])) (take 2 [5,4,1,2]) (rot1 (2,[3],[5,4,1,2])) (take 2 [5,4,1,2])
                                     = Quad (rot2 ([3],[1,2],[])) [5,4] (rot2 ([3],[1,2],[])) [5,4]
                                     = Quad [3,2,1] [5,4] [3,2,1] [5,4]

removeL (Quad [3,2,1] [5,4] [3,2,1] [5,4]) = (3, makedq ([2,1] [5,4] [1] []))
                                           = (3, Quad [2,1] [5,4] [1] [])

removeR (Quad [2,1] [5,4] [1] []) = (5, makedq ([2,1] [4] [] [])
                                  = (5, Quad [2,1] [4] [] [])

3) makedq makes sure to pre-evaluate both tails, and balances the head list and the tail list (l and r) when one get (.5*len + r (or l) + 1)

4) Because the tails are pre-evaluated reverse is only ever done when l and r are small (smaller then 3 total), otherwise you can just grab
the tail to replace l and r. Therefore insert is always going to be O(1) and remove as well, and the balancing makes constant overhead


================================Finger Trees===========================================

1) A finger tree is either Empty, as Singleton value, or a "deep tree" with a list of digits (fingers) at either end, and the rest of the values/nodes
are at least another subtree deep

2) 

t1 = Deep [1,2,3] (Deep [3,4] Single 8 [5,6]) [7,8]

insert on the left 2 and 1:

t1' = insl 2 t1 = Deep [2,1,2,3] (Deep [3,4] Single 8 [5,6]) [7,8]

t2 = insl 1 t1' = Deep [1,2] (insl Node3 [1,2,3] (Deep [3,4] Single 8 [5,6]) [7,8]
                = Deep [1,2] (Deep [Node3 [1,2,3],3,4] Single 8 [5,6]) [7,8]

insert on the right 10 and 11:

t2' = insr 10 t2 = Deep [1,2] (Deep [Node3 [1,2,3],3,4] Single 8 [5,6]) [7,8,10]

t3 = insr 11 t2' = Deep [1,2] (Deep [Node3 [1,2,3],3,4] Single 8 [5,6]) [7,8,10,11]

Remove and element from the right:

viewR t3 = ConsR 7 (deepR [1,2] (Deep [Node3 [1,2,3],3,4] Single 8 [5,6]) [8,10,11])
ConsR 7 (Deep [1,2] (Deep [Node3 [1,2,3],3,4] Single 8 [5,6]) [8,10,11])

Create a tree from the list [1..10]: 

toTree [1..10] = liftinsl [1..10] Empty
= reducel insl [1..10] Empty
= foldl insl [1..10] Empty
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (insl 5 (insl 4 (insl 3 (insl 2 (insl 1 Empty)))))))))
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (insl 5 (insl 4 (insl 3 (insl 2 (Single 1)))))))))
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (insl 5 (insl 4 (insl 3 (Deep [2] Empty [1]))))))))
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (insl 5 (insl 4 (Deep [3,2] Empty [1])))))))
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (insl 5 (Deep [4,3,2] Empty [1]))))))
insl 10 (insl 9 (insl 8 (insl 7 (insl 6 (Deep [5,4,3,2] Empty [1])))))
insl 10 (insl 9 (insl 8 (insl 7 (Deep [6,5] (insl (Node3 [4,3,2]) Empty) [1]))))
insl 10 (insl 9 (insl 8 (insl 7 (Deep [6,5] (Single (Node3 [4,3,2])) [1]))))
insl 10 (insl 9 (insl 8 (Deep [7,6,5] (Single (Node3 [4,3,2])) [1])))
insl 10 (insl 9 (Deep [8,7,6,5] (Single (Node3 [4,3,2])) [1]))
insl 10 (Deep [9,8] (insl (Node3 [7,6,5] (single (Node3 [4,3,2])))) [1])
insl 10 (Deep [9,8] (Deep [Node3 [7,6,5]] Empty [Node3 [4,3,2]) [1])
Deep [10,9,8] (Deep [Node3 [7,6,5]] Empty [Node3 [4,3,2]) [1] 


3) What is the Big O of getting values from the front or the read?

O(1) for viewL and viewR, plus remaking the tree, which in most cases is pattern matching, which is also constant


4) How does the append function work?

The trivial versions of append just insert a few elements into an existing tree, using a list as a medium for folding values in

The deep version uses the 1st trees front values as the new trees front values, and the 2nd trees rear values as the new trees rear values and everything
else gets shoved down into the spine of the new tree


5) How do finger trees achieve their efficiency?

It makes it very quick to get to recently used items (the values on the fingers), and it auto-balances up new, also fairly recently used values
when all the fingers on one side have been used. 


================================================Red/Black and AVL Trees================================================

1) Create an AVL tree from the list [1..10]:

foldl insert [1..10] Empty 
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (insert 2 (insert 1 Empty)))))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (insert 2 (fst $ ins 1 Empty)))))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (insert 2 (Br Empty 1 Empty 0)))))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (fst $ ins (Br Empty 1 Empty 0)))))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (node (Empty,0) 1 (ins Empty) 0))))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (node (Empty,0) 1 (Br Empty 2 Empty,1)) 0)))))))
insert 10 (insert 9 (insert 8 (insert 7 (insert 6 (insert 5 (insert 4 (insert 3 (balance (Br Empty 2 (Br Empty 2 Empty 1), 0)))))))))


thats going to take too long...so here's the short(er) version: (NOTE: balance factor = bf = length r - length l)

-from there you have a root 1 and rchild 2, 1's bf is +1, 2's is 0, total height is 1
insert 3 as rchild of 2, now bf is off at the root (1) because the right is 2 heavier than the left resulting in a rotation
-now 2 is the root with lchild 1 and rchild 3, total height is 1
insert 4 as rchild of 3, 2's balance factor is +1 from 0, as is 3's 
insert 5 as rchild of 4, 2's bf is +2, needs rotation...rotate 3 to root and 2 to its lchild, 1 to 2's lchild..4 is 3's rchild
rotate again, making 1 3's lchild and 2 1's rchild...bfs: (3:0,1:+1,2:0,4:+1,5:0) this was a left to right rotation
-now 3 is root with lchild 1 (with rchild 2) and rchild 4 (with rchild 5), total height is 2
insert 6 as rchild of 5, 4's bf becomes +2, needs to rotate:
-5 becomes 3's rchild with lchild 4 and rchild 6 bfs:(3:0,1:+1,2:0,4:0,5:0,6:0) total height is 2
insert 7 as 6's rchild, bfs of 3,5 and 6 go to +1, still balanced
insert 8 as 7's rchild, bfs of 3,5,6 go to +2, needs to rotate...
-7 becomes 5's rchild with lchild 6 and rchild 8 bfs:(3:+1,1:+1,2:0,4:0,5:+1,6:0,7:0,8:0) total height is 4
insert 9 as 8's rchild, bfs of 3 and 5 go to +2 needs to rotate...
-after 2 rotations 5 becomes root with lchild 3 and rchild 7 bfs:(5:0,3:-1,1:+1,4:0,7:+1,6:0,8:+1,9:0) total height is 3
insert 10 as rchild of 9, bfs of 7 and 8 become +2, rotate 9 to rchild of 7 with lchild of 8 and rchild of 10, total height is 4


2) Describe how the rotations occur, what triggers the rotation, and what the resulting tree looks like in terms of the balance factors.

Rotations occur by pulling unbalanced nodes to their underbalanced side, and replacing them with a child from the other overbalanced side. Sometimes
this has to happen twice, or more. The rotations are triggered when the balance force (height r - height l) becomes > 1 or < -1. The resulting
tree has all the nodes with proper balance forces, plus is a generally "fuller" bst.


3) Create an redblack tree from the list [1..10]

foldl rbinsert [1..10] RB_E
rbinsert 10 (rbinsert 9 (rbinsert 8 (rbinsert 7 (rbinsert 6 (rbinsert 5 (rbinsert 4 (rbinsert 3 (rbinsert 2 (rbinsert 1 RB_E)))))))))
rbinsert 10 (rbinsert 9 (rbinsert 8 (rbinsert 7 (rbinsert 6 (rbinsert 5 (rbinsert 4 (rbinsert 3 (rbinsert 2 (makeRootBlack (RB_T R RB_E 1 RB_E))))))))))
rbinsert 10 (rbinsert 9 (rbinsert 8 (rbinsert 7 (rbinsert 6 (rbinsert 5 (rbinsert 4 (rbinsert 3 (rbinsert 2 (RB_T B RB_E 1 RB_E)))))))))
rbinsert 10 (rbinsert 9 (rbinsert 8 (rbinsert 7 (rbinsert 6 (rbinsert 5 (rbinsert 4 (rbinsert 3 (makeRootBlack (balance (RB_T B RB_E 1 (ins 2 RB_E)))))))))))
rbinsert 10 (rbinsert 9 (rbinsert 8 (rbinsert 7 (rbinsert 6 (rbinsert 5 (rbinsert 4 (rbinsert 3 (makeRootBlack (balance (RB_T B RB_E 1 (RB_T RB_E 2 RB_E)))))))))))

This is also gonna take too long, so i'll just talk about what happens: (Note: root is black = RIT, equal #s of blacks on each path = EQB)
insert 2 as red is fine, EQB, RIT
insert 3 as red violates reds having black children, make 3 black, No longer EQB, so rotate
2 becomes root (as black, 1 and 3 are its children as red)
insert 4 as red rchild of 3, make it black and EQB and RIT
insert insert 5 as red rchild of 4, RIT, EQB all is good, total height is 4 (not counting the nil leaves)
insert 6 as red rchild of 5, not EQB and not black child of red node..so rotate 5 to rchld of 3 with lchild 4 and rchild 6. 2 and 5 are black, total height 4
insert 7 as red child of 6, not black child of red node, make it black and EQB. height is 5, but now the right path from the root has more black nodes than the left so we rotate around root
4 becomes new root (black) with children 2 and and 6 (both red), 2 has black children 1 and 3, 6 has black children 5 and 7. height of 3
insert 8 as rchild of 7 as red, EQB, RIT
insert 9 as rchild of 9 as red, need to rotate. 8 becomes new (black) rchild of 6, with 7 and 9 its red children. 
insert 10 as red, change it to black, all good, height is 4


4) Desribe how the rotations occur, the color changes, and the rotations.
There are several rules to cause rotations to occur, consequent parent-children colors, a nonblack root, imbalance in # of black nodes. The rotations or color changes occur whenever
one of tehse rules is violated. Color changing and rotations all happen with pattern matching (yuck).


5) How do the two trees compare in height 
They ended up the same height, but rb trees can vary more than avl. the worst case for avl is you have every left node at -1, which isnt too bad, but the rbtrees can have +2 height on one 
path if you have full red on the outside.



