Zack Raver; ravzac14
due Tues week 2

2.1, 2.2, 2.3, 2.7, 2.14, 2.15, 2.26, 2.28, 2.31

2.1)

37, sqrt(N), 2/N, N, N log log N, N log N, N log2 N, N^1.5, N^2, N^2 log N, N^3, 2^N/2, 2^N
             ------  ------------------------------         --------------       

2.2) 
a) true
b) true
c) true
d) false

2.3) The second: N^1+e/sqrt(logN), e > 0

Because e grows faster than sqrt(logN), making the exponent larger and larger, growing much faster

2.7) for each: analyze with BigO, implement the code in lang of choice and give running time for several values of N; compare

1) n
2) n^2 
3) n^3
4) n log n
5) n log^2 n
6) n (log^2 -n) n

2.14) 
a) everyloop takes 3^totalsum so far and adds (0 <= i <= n), and it loops n times.

2.15) 

for (int i = 0; i < a.size(); i++){
  if (a[i] == i) return true;
}

the worst case here is N, best case is 1


2.26) 

2.28) 

int highest = 0;
int secondHighest = 0;
for (int i = 0; i < a.size(); i++)
    if (a[i] > highest)
        highest = a[i]
    else if (a[i] > secondHighest)
        secondHighest = a[i]
return highest + secondHighest
or
return highest * secondHighest

for - this would be altered to have the two closest together elements

int one = 0;
int two = 0;
int maxDiff = 2147483647;
for (int i = 0; i < a.size(); i++)
    for (int j = 0; j < a.size(); j++)
        int diff = abs(i - j);
        if (diff < maxDiff
            one = i;
            two = j

return maxDiff;

for / you want the largest and the smallest:
int highest = 0;
int smallest = 2147483647;
for (int i = 0; i < a.size(); i++)
    if (a[i] > highest)
        highest = a[i]
    else if (a[i] < smallest)
        smallest = a[i]
return highest / smallest

2.31)
suppose low = mid, instead of low = mid + 1

Yea it would still work, but if mid < x, it would search the entire longest path, before returning..
or
maybe it doesnt work, and just skips it
